#Configuration file for drone2report
# - values are provided in sections, which are named using square 
#   brackets [LIKE THIS]. No two sections can share the same name
# - you can refer to parameters from other sections via ${section:key} syntax,
#   e.g. ${DEFAULT:infolder} will refer to the parameter "infolder" as 
#   defined in the DEFAULT section
# - all parameter defined in the DEFAULT section are common to all sections.
# - parameter names are internally changed to lower case, so the following:
#   folder=foo
#   FOLDER=bar
#   will be considered the same and one will overwrite the other, with no
#   guarantee on the final value (just avoid case conflict please)
# - when asked for boolean values, "true" (case insensitive) will be
#   evaluated as boolean true, "false" (case insensitive) as boolean false,
#   and other values will generate an error

[DEFAULT]
#parameters in the default section are copied in all other sections, but if
#a section specifies again a parameter the section one will overwrite the 
#default one

#number of cores available for computation, to be used when parallel 
#execution is available
cores=4

#the base where all the input data is stored, which then can be used in 
#the other sections to simplify the notation a bit 
infolder=/path/to/input_data

#the folder for all the output of the computation (typically subfolders 
#are created)
outfolder=/path/to/results_folder

#if this field is set to True no result will be overwritten: if a result
#of a specific analysis is already present (due to previous runs) that
#analysis will be skipped altogether 
skip_if_already_done=True

#some methods support a more verbose interface, printing info and warning messages
verbose=False

#This is an example data section, specifying a single input image. For each
#single image you will have many sections, like:
#  [DATA image1]
#  [DATA image2]
#  [DATA image3]
#Each with its own parameters. If some images need to be grouped you can 
#add a set qualifier in the section name, like this:
#  [DATA experimentA image1]
#  [DATA experimentA image2]
#  [DATA experimentA image3]
#  [DATA experimentB image1]
#  [DATA experimentB image2]
#Analyses spanning more than one image will group them by set qualifier
#(in the example, by experimentA and experimentB) and sort alphabetically
#the images inside each set
[DATA 240308_RGB]
#this boolean parameter specifies if this piece of data should be analyzed or not
active=False
#you can add as many "meta_" parameters as you want, or active them completely
#The meta parameter are used to store extra information on this specific
#image
meta_date=2024/03/08
meta_time=9.45 am
meta_desc=A flight with drone X on field y, RGB flight
#this field qualifies the data and specifies how it should be read 
type=tif_multichannel
#the path to the orthophoto geotif file
orthomosaic=${DEFAULT:infolder}/my_image.tif
#Channel names, comma separated. Valid values (case insensitive) are: red, 
#green, blue, rededge, NIR, ...
#Actually any string will do, but then index functions need to know the names of
#the channels to be used
#examples:
#   standard RGB
#   channels=red,green,blue
#
#	micasense 10 bands
#   channels=coastalBlue,Blue,Green531,Green,Red650,Red,RedEdge705,RedEdge,RedEdge740,NIR
#If you specify a number of channel different from what actually is in the
#image you get an error message
channels=red,green,blue

#optional parameter: if the data needs to be rescaled between 0 and 1
#(e.g. for computing indexes) everything will be divided by this value
#If the data is already scaled just omit it
max_value=255

#Optional parameter: what integer value in the image indicates missing
#data for a specific pixel. If not specified the value will be extracted
#from the geotiff. If you specify a value it will take precedence, but 
#if your value and the image value are different you will get a warning
#message
#nodata=-1

#the path to the shapefile containing the ROIs (defined as polygons). Keep
#in mind that for each .shp file several other files with the same name but
# different extensions are required (.shx, .dbf, .prj...)
shapes_file=${DEFAULT:infolder}/my_shapefile.shp
#the field in the shapes file that contains the ROI names
shapes_index=plot_id

#another section for another image. In this case it's thermal data, single channel
[DATA 240308_thermal]
active=True
type=tif_multichannel
orthomosaic=${DEFAULT:infolder}/san_lazzaro_240308/230308_SL_M3T_102_v001.tif
channels=temp
nodata=-32767
shapes_file=${DEFAULT:infolder}/san_lazzaro_240308/SLazzaro_102-103-104_multi_v01.shp
shapes_index=plot_id
#this runs the "thumbnail" task to create a thumbnail of each active 
#input image. The task itself can be turned on and off via the active 
#parameter. It will produce new images with:
# - reduced size
# - only three channels, interpreted as RGB in a .png image
# - (optional) ROIs perimeters traced in red
# - (optional) pixel thresholded using the specified index function

[TASK thumbnail]
active=False
outfolder=${DEFAULT:outfolder}/indexes/NDVI_thresholds
#the width in pixel of the resized output images. the height is computed
#to keep the proportions
output_width=800
#what three channels are to be shown in the thumbnail. They will be used as 
#RGB in a png image. If the original image is single channel just repeat
#the channel three times. E.g. if you have a DEM file with a single "height"
#channel you would write: visible_channels=height,height,height
visible_channels=red,green,blue
#should pixel values be rescaled between 0 and 255?
rescale_to_255=True
#if true the perimeter of the ROIs (aka geometries, or shapes) present
#in the dataset will be drawn in the output image, in red
draw_ROIs=True
#optional patameters: if present the specified index will be computed on
#the image and then thresholded using the values specified. All pixels
#above the threshold will be colored purple. If these two parameters are
#present a set of images will be generated, one image per specified threshold,
#plus the "normal" thumbnail without extra coloring
index_investigated=NDVI
index_thresholds=0.2,0.3,0.4,0.5,1

#this run the "indexes" task on all active DATA images. It will produce
#a .csv file for each image with one row per ROI and columns corresponding
#to the specified indexes 
[TASK indexes]
active=False
outfolder=${DEFAULT:outfolder}/indexes
#list of indexes to be computed. Each correspond to an actual python function,
#if you need more indexes just define your new function in d2r/tasks/indexes.py
indexes=NDVI,GLI
#you can specify a boolean condition, only the pixels satisfying it will
#be considered when computing the indexes. If you don't have any thresholding
#condition just don't put this field  
threshold= (NDVI > 0.5) & (NDVI < 0.7) 

#this run a RENDER step, which elaborates what is produced by TASK steps.
#In this specific case many .csv files will be collated into a single one
[RENDER collect_tables]
active=True
#add as many "table_infolder" fields as you like, just append numbers or 
#whatever to keep them separated
table_infolder1=${DEFAULT:outfolder}/indexes1
table_infolder2=${DEFAULT:outfolder}/indexes2
outfolder=${DEFAULT:outfolder}/summary_tables

